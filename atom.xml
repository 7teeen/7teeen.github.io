<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://7teeen.github.io</id>
    <title>7teen</title>
    <updated>2021-06-01T11:30:24.257Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://7teeen.github.io"/>
    <link rel="self" href="https://7teeen.github.io/atom.xml"/>
    <subtitle>僕らは最初で最後の今を生きているんだよ</subtitle>
    <logo>https://7teeen.github.io/images/avatar.png</logo>
    <icon>https://7teeen.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, 7teen</rights>
    <entry>
        <title type="html"><![CDATA[地图可视化 🌍]]></title>
        <id>https://7teeen.github.io/post/di-tu-ke-shi-hua/</id>
        <link href="https://7teeen.github.io/post/di-tu-ke-shi-hua/">
        </link>
        <updated>2021-06-01T04:35:06.000Z</updated>
        <content type="html"><![CDATA[<h1 id="地图数据来源">地图数据来源</h1>
<ul>
<li>GeoJSON：将 JSON 的格式应用于地理上的文件，叫做 GeoJSON 文件，可直接下载使用<br>
（以中国地图为例，使用的GeoJSON文件为China.geojson）</li>
<li>China.geojson文件内容示例：</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://7teeen.github.io/post-images/1622522469682.png" alt="" loading="lazy"></figure>
<h1 id="投影函数">投影函数</h1>
<ul>
<li><strong>球形墨卡托投影</strong><br>
由于 GeoJSON 文件中的地图数据，都是经度和纬度的信息。它们都是三维的，而要在网页上显示的是二维的，所以要设定一个投影函数来转换经度纬度</li>
</ul>
<pre><code>  var projection = d3.geo.marcator()
						   .center([116, 40])	//经纬度
						   .scale(800)			//比例尺
						   .translate([w/2, h/2]);
</code></pre>
<h1 id="地理路径生成器">地理路径生成器</h1>
<ul>
<li>为了根据地图的地理数据生成 SVG 中 path 元素的路径值，需要用到 d3.geo.path()</li>
</ul>
<pre><code>  var path = d3.geo.path()
					 .projection(projection);
</code></pre>
<ul>
<li>projection() 是设定生成器的投影函数，把上面定义的投影传入即可。以后，当使用此生成器计算路径时，会自己加入投影的影响</li>
</ul>
<h1 id="代码实现">代码实现</h1>
<ul>
<li><strong>中国地图</strong></li>
</ul>
<pre><code>&lt;html&gt;  
    &lt;head&gt;  
        &lt;meta charset=&quot;utf-8&quot;&gt;  
        &lt;title&gt;基于GeoJSON绘制中国GDP2016数据地图&lt;/title&gt;  
		&lt;style&gt;
			.province {
				stroke: black;
				stroke-width: 1px;
			}
		  
			.southchinasea {
				stroke: black;
				stroke-width: 1px;
				fill: red;
			}
		&lt;/style&gt;
    &lt;/head&gt; 
	&lt;body&gt;
		&lt;script src=&quot;../d3.v3.min.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt; 
		&lt;script&gt;
			var  width=(window.innerWidth||document.documentElement.clientWidth||document.body.clientWidth)*0.98;
			var  height=(window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight)*0.98;
		
		    var gdp = [6790.32,2417.05,16803.12,10502.56,15717.27,23014.59,25979.82,22005.63,72812.55,
	                   1026.39,9324.80,3702.76,2911.77,18021.86,12766.49,29550.19,28902.21,30053.10,13619.17,
	                   29806.11,37002.16,28669.02,63002.33,16538.19,16723.78,70116.38,25123.45,42886.49,14063.13,17831.51,15083.67,1000,1000,1000];
			var linear = d3.scale.linear()
						.domain([990,90000])
						.range([0,255]);
			var mapcolor = new Array();
			for(var i=0; i&lt;34; i++){
				mapcolor[i] = &quot;#&quot;+parseInt(255-linear(gdp[i])).toString(16)+&quot;0000&quot;;
			}
			console.log(mapcolor);
			
			var svg = d3.select(&quot;body&quot;).append(&quot;svg&quot;)
						.attr(&quot;width&quot;, width)
						.attr(&quot;height&quot;, height);

			//定义地图的投影
			var projection = d3.geo.mercator()
								   .center([107, 31])
								   .scale(550)
								   .translate([width/2, height/2]);
		
			//定义地形路径生成器
			var path = d3.geo.path()
						 .projection(projection);	//设定投影
		
			//请求china.geojson
			d3.json(&quot;China.geojson&quot;, function(error, root) {
				if (error) 
					return console.error(error);
				console.log(root);

				var groups = svg.append(&quot;g&quot;);
					
				groups.selectAll(&quot;path&quot;)
						.data(root.features)
						.enter()
						.append(&quot;path&quot;)
						.attr(&quot;class&quot;,&quot;province&quot;)
						.attr(&quot;fill&quot;, function(d,i){
							return mapcolor[i];
						})
						.attr(&quot;d&quot;, path)	//使用路径生成器
						.on(&quot;mouseover&quot;,function(d,i){
							d3.select(this)
								.attr(&quot;fill&quot;,&quot;yellow&quot;);
						})
						.on(&quot;mouseout&quot;,function(d,i){
							d3.select(this)
								.attr(&quot;fill&quot;,mapcolor[i]);
						});
			    var texts = svg.selectAll(&quot;.texts&quot;)															
								.data(root.features)								
								.enter()
								.append(&quot;text&quot;)
								.attr(&quot;class&quot;, &quot;texts&quot;)	
								.text(function(d){return d.properties.name;})
								.attr(&quot;transform&quot;, function(d) {
									var centroid = path.centroid(d),
										x = centroid[0],
										y = centroid[1];
								    if((d.properties.name==&quot;河北&quot;)||(d.properties.name==&quot;澳门&quot;)||(d.properties.name==&quot;安徽&quot;))
											y=y+25;
									return &quot;translate(&quot; + x + &quot;, &quot; + y + &quot;)&quot;;
								})
								.attr('fill','#AAA')
								.attr(&quot;font-size&quot;,&quot;12px&quot;);								
			});		
			//请求southchinasea.svg
			d3.xml(&quot;southchinasea.svg&quot;, function(error, xmlDocument) {
				svg.html(function(d){
					return d3.select(this).html() + xmlDocument.getElementsByTagName(&quot;g&quot;)[0].outerHTML;
				});			
				d3.select(&quot;#southchinasea&quot;)
					.attr(&quot;transform&quot;,&quot;translate(840,380)scale(0.5)&quot;)
					.attr(&quot;class&quot;,&quot;southchinasea&quot;);
			});
		&lt;/script&gt;	
    &lt;/body&gt;  
&lt;/html&gt;  
</code></pre>
<p>显示结果如下👇🏻</p>
<figure data-type="image" tabindex="2"><img src="https://7teeen.github.io/post-images/1622546819923.png" alt="" loading="lazy"></figure>
<ul>
<li><strong>使用Highcharts实现各省2020年GDP</strong></li>
</ul>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
	&lt;meta charset=&quot;UTF-8&quot;&gt;
	&lt;title&gt;2020年中国各省GDP地图&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;&lt;div id=&quot;map&quot; style=&quot;width:1424px ;height: 720px;&quot;&gt;&lt;/div&gt;
&lt;font color=&quot;gray&quot;&gt;&lt;div class=&quot;text&quot; style=&quot; text-align:end;&quot;&gt;
				数据来源：国家统计局&lt;/font&gt;&lt;/div&gt;
&lt;font color=&quot;gray&quot;&gt;&lt;div class=&quot;text&quot; style=&quot; text-align:end;&quot;&gt;
				201811153017王钰莹 &amp; 201811153028罗可意&lt;/font&gt;&lt;/div&gt;
&lt;script src=&quot;https://img.hcharts.cn/highmaps/highmaps.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://data.jianshukeji.com/geochina/china.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
// 随机数据
var data = [{&quot;name&quot;:&quot;北京&quot;,&quot;value&quot;:36102.60},{&quot;name&quot;:&quot;天津&quot;,&quot;value&quot;:14083.73},{&quot;name&quot;:&quot;河北&quot;,&quot;value&quot;:36206.90},{&quot;name&quot;:&quot;山西&quot;,&quot;value&quot;:17651.93},{&quot;name&quot;:&quot;内蒙古&quot;,&quot;value&quot;:17360.00},{&quot;name&quot;:&quot;辽宁&quot;,&quot;value&quot;:25115.00},{&quot;name&quot;:&quot;吉林&quot;,&quot;value&quot;:12311.32},{&quot;name&quot;:&quot;黑龙江&quot;,&quot;value&quot;:13698.50},{&quot;name&quot;:&quot;上海&quot;,&quot;value&quot;:38700.58},{&quot;name&quot;:&quot;江苏&quot;,&quot;value&quot;:102700.00},{&quot;name&quot;:&quot;浙江&quot;,&quot;value&quot;:64613.00},{&quot;name&quot;:&quot;安徽&quot;,&quot;value&quot;:38680.60},{&quot;name&quot;:&quot;福建&quot;,&quot;value&quot;:43903.89},{&quot;name&quot;:&quot;江西&quot;,&quot;value&quot;:25691.50},{&quot;name&quot;:&quot;山东&quot;,&quot;value&quot;:73129.00},{&quot;name&quot;:&quot;河南&quot;,&quot;value&quot;:54997.07},{&quot;name&quot;:&quot;湖北&quot;,&quot;value&quot;:43443.46},{&quot;name&quot;:&quot;湖南&quot;,&quot;value&quot;:41781.49},{&quot;name&quot;:&quot;广东&quot;,&quot;value&quot;:110760.94},{&quot;name&quot;:&quot;广西&quot;,&quot;value&quot;:22156.69},{&quot;name&quot;:&quot;海南&quot;,&quot;value&quot;:5532.39},{&quot;name&quot;:&quot;重庆&quot;,&quot;value&quot;:25002.79},{&quot;name&quot;:&quot;四川&quot;,&quot;value&quot;:48598.76},{&quot;name&quot;:&quot;贵州&quot;,&quot;value&quot;:17826.56},{&quot;name&quot;:&quot;云南&quot;,&quot;value&quot;:24500.00},{&quot;name&quot;:&quot;西藏&quot;,&quot;value&quot;:1902.74},{&quot;name&quot;:&quot;陕西&quot;,&quot;value&quot;:26181.86},{&quot;name&quot;:&quot;甘肃&quot;,&quot;value&quot;:9016.70},{&quot;name&quot;:&quot;青海&quot;,&quot;value&quot;:3005.92},{&quot;name&quot;:&quot;宁夏&quot;,&quot;value&quot;:3920.55},{&quot;name&quot;:&quot;新疆&quot;,&quot;value&quot;:13797.58},{&quot;name&quot;:&quot;台湾&quot;,&quot;value&quot;:42885.10},{&quot;name&quot;:&quot;香港&quot;,&quot;value&quot;:23662.80},{&quot;name&quot;:&quot;澳门&quot;,&quot;value&quot;:1427.72},{&quot;name&quot;:&quot;南海诸岛&quot;,&quot;value&quot;:76},{&quot;name&quot;:&quot;南海诸岛&quot;,&quot;value&quot;:null}];
// 初始化图表
var map = new Highcharts.Map('map', {
  title: {
    text: '2020年中国各省GDP地图',
    style:{
        fontSize: '50px',
        fontWeight:&quot;bold&quot;
    }
  },
  colorAxis: {
    min: 0,
    minColor: 'rgb(255,255,255)',
    maxColor: '#006cee'
  },
  series: [{
    data: data,
    name: 'GDP(单位：亿元)',
    mapData: Highcharts.maps['cn/china'],
    joinBy: 'name' // 根据 name 属性进行关联
  }]
});
&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;
</code></pre>
<p>显示结果如下👇🏻</p>
<figure data-type="image" tabindex="3"><img src="https://7teeen.github.io/post-images/1622546950960.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenCV + dlib实现人脸识别与匹配]]></title>
        <id>https://7teeen.github.io/post/opencv-dlib-shi-xian-ren-lian-shi-bie/</id>
        <link href="https://7teeen.github.io/post/opencv-dlib-shi-xian-ren-lian-shi-bie/">
        </link>
        <updated>2021-05-28T03:28:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="demo_1-人脸定位仅opencv">demo_1: 人脸定位（仅opencv）</h1>
<h2 id="安装opencv">安装opencv</h2>
<pre><code>pip install opencv-python
</code></pre>
<p>❗️需要包<code>Python路径下/Lib/site-packages/cv2/data/haarcascade_frontalface_default.xml</code></p>
<h2 id="代码实现">代码实现</h2>
<p>demo1_1.py</p>
<pre><code>import cv2

def detect(filename):
    face_cascade = cv2.CascadeClassifier('/Users/keyi/PycharmProjects/face1/venv/lib/python3.8/site-packages/cv2/data/haarcascade_frontalface_default.xml')

    img = cv2.imread(filename)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

    faces = face_cascade.detectMultiScale(gray, 1.3, 5)

    for (x, y, w, h) in faces:
        img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)


    cv2.imshow('Person Detected!', img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()


if __name__ == '__main__':
    detect('/Users/keyi/Downloads/IMG_1971.JPG')
</code></pre>
<p>准确性更好的demo1_2.py</p>
<pre><code>import face_recognition
import cv2

image = face_recognition.load_image_file(&quot;/Users/keyi/Downloads/IMG_1971.JPG&quot;)
face_locations_noCNN=face_recognition.face_locations(image)
# A list of tuples of found face locations in css (top, right, bottom, left) order
# 因为返回值的顺序是这样子的，因此在后面的for循环里面赋值要注意按这个顺序来



print(&quot;face_location_noCNN:&quot;)
print(face_locations_noCNN)
face_num2=len(face_locations_noCNN)
print(face_num2)       # The number of faces
# 到这里为止，可以观察两种情况的坐标和人脸数，一般来说，坐标会不一样，但是检测出来的人脸数应该是一样的
# 也就是说face_num1　＝　face_num２；　face_locations_useCNN　和　face_locations_noCNN　不一样


org = cv2.imread(&quot;/Users/keyi/Downloads/IMG_1971.JPG&quot;)
img = cv2.imread(&quot;/Users/keyi/Downloads/IMG_1971.JPG&quot;)
cv2.imshow(&quot;/Users/keyi/Downloads/IMG_1971.JPG&quot;,img)  # 原始图片




for i in range(0,face_num2):
    top = face_locations_noCNN[i][0]
    right = face_locations_noCNN[i][1]
    bottom = face_locations_noCNN[i][2]
    left = face_locations_noCNN[i][3]

    start = (left, top)
    end = (right, bottom)

    color = (0,255,255)
    thickness = 2
    cv2.rectangle(org, start, end, color, thickness)

cv2.imshow(&quot;no cnn &quot;,org)

cv2.waitKey(0)
cv2.destroyAllWindows()
</code></pre>
<p>可得到人脸识别后图像👇🏻</p>
<img width="509" alt="image" src="https://user-images.githubusercontent.com/84889770/119914869-d5067500-bf93-11eb-9286-49dcccbeab86.png">
<h1 id="demo_2-人脸定位dlib-face_recognition">demo_2: 人脸定位（dlib + face_recognition）</h1>
<h2 id="安装dlib-face_recognition">安装dlib / face_recognition</h2>
<pre><code>pip install dlib
pip install face_recognition
</code></pre>
<p>❗️需要包<code>shape_predictor_68_face_landmarks.dat</code></p>
<h2 id="代码实现-2">代码实现</h2>
<p>demo2.py</p>
<pre><code>#coding=utf-8

import cv2
import dlib

path = &quot;/Users/keyi/Downloads/IMG_1971.JPG&quot;
img = cv2.imread(path)
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

#人脸分类器
detector = dlib.get_frontal_face_detector()
# 获取人脸检测器
predictor = dlib.shape_predictor(r&quot;/Users/keyi/PycharmProjects/face1/venv/lib/python3.8/site-packages/face_recognition_models/models/shape_predictor_68_face_landmarks.dat&quot;)
dets = detector(gray, 1)
for face in dets:
    shape = predictor(img, face)  # 寻找人脸的68个标定点
    # 遍历所有点，打印出其坐标，并圈出来
    for pt in shape.parts():
        pt_pos = (pt.x, pt.y)
        cv2.circle(img, pt_pos, 2, (0, 255, 0), 1)
    cv2.imshow(&quot;image&quot;, img)

cv2.waitKey(0)
cv2.destroyAllWindows()
</code></pre>
<p>可得到人脸定位结果如下👇🏻</p>
<img width="901" alt="image" src="https://user-images.githubusercontent.com/84889770/119915440-1f3c2600-bf95-11eb-9b7a-640eaa556f7f.png">
<h1 id="demo_3-人脸匹配">demo_3: 人脸匹配</h1>
<h2 id="原理">原理</h2>
<p>每个人脸识别系统都有自己的人脸数据库，该数据库包含人脸特征向量和对应的信息。</p>
<ul>
<li>人脸特征向量提取：</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://7teeen.github.io/post-images/1622187304697.png" alt="" loading="lazy"></figure>
<ul>
<li>特征向量PCA降维：</li>
</ul>
<figure data-type="image" tabindex="2"><img src="https://7teeen.github.io/post-images/1622187313947.png" alt="" loading="lazy"></figure>
<h2 id="代码实现-3">代码实现</h2>
<p>demo3.py</p>
<pre><code>import cv2
import face_recognition
#显示已知图片
known_image=cv2.imread(&quot;/Users/keyi/Downloads/IMG_1892.JPG&quot;)
cv2.imshow(&quot;image&quot;, known_image)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
known_image = face_recognition.load_image_file(&quot;/Users/keyi/Downloads/IMG_1892.JPG&quot;)
# 显示待匹配图片
unknown_image=cv2.imread(&quot;/Users/keyi/Downloads/IMG_1747.JPG&quot;)
cv2.imshow(&quot;unknown_image&quot;, unknown_image)
# cv2.waitKey(0)
# cv2.destroyAllWindows()
unknown_image = face_recognition.load_image_file(&quot;/Users/keyi/Downloads/IMG_1747.JPG&quot;)

known_encoding = face_recognition.face_encodings(known_image)[0]
unknown_encoding = face_recognition.face_encodings(unknown_image)[0]

results = face_recognition.compare_faces([known_encoding],
                                         unknown_encoding,
                                         tolerance=0.6)
if results[0] == True:
    print(&quot;匹配成功，该未知图片与已有图片人脸可匹配！&quot;)
else:
    print(&quot;匹配失败！&quot;)
</code></pre>
<h2 id="结果输出">结果输出</h2>
<p>当known_image和unknown_image为同一张人脸时，匹配成功👇🏻</p>
<figure data-type="image" tabindex="3"><img src="https://7teeen.github.io/post-images/1622187196360.png" alt="" loading="lazy"></figure>
<p>当known_image和unknown_image为不同人脸时，匹配失败👇🏻</p>
<figure data-type="image" tabindex="4"><img src="https://7teeen.github.io/post-images/1622187263267.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Node.JS+Vue+Vite+D3]]></title>
        <id>https://7teeen.github.io/post/nodejsvuevited3/</id>
        <link href="https://7teeen.github.io/post/nodejsvuevited3/">
        </link>
        <updated>2021-05-28T03:22:20.000Z</updated>
        <content type="html"><![CDATA[<h2 id="重要概念">重要概念📕</h2>
<ul>
<li>Node.js：本教程开发的前置基础环境</li>
<li>npm / yarn：包管理工具，npm 已随 Node.js 默认安装，yarn可选（但建议尝试）</li>
<li>D3：指Data-Driven Documents，数据可视化最为流行的基础库</li>
<li>Vue：The Progressive JavaScript Framework，目前最为流行的前端框架之一，相比React学习曲线要更为平缓</li>
<li>Vite：Native-ESM powered web dev build tool，面向未来的前端构建工具</li>
</ul>
<h2 id="尝试安装nodejs">尝试安装Node.js</h2>
<p>Node.js下载地址👉🏻<a href="http://nodejs.cn/download/">Node.js下载点这里</a></p>
<p>验证是否安装成功：Terminal输入<code>node --version</code>（如有对应版本输出，即为安装成功）</p>
<h2 id="尝试安装vue-vite">尝试安装Vue / Vite</h2>
<p>如果没有安装yarn，需要先使用命令<code>npm install yarn</code>进行安装</p>
<ul>
<li><strong>安装Vue</strong></li>
</ul>
<pre><code>npm install vue
yarn add vue
</code></pre>
<p>(如果需要指定版本的vue可以把vue换成vue@版本)</p>
<ul>
<li><strong>安装Vite</strong></li>
</ul>
<pre><code>npm install vite
</code></pre>
<ul>
<li><strong>创建一个vue的空工程（此处命名为hellovue）</strong></li>
</ul>
<pre><code>npm init vite-app hellovue
</code></pre>
<ul>
<li><strong>也可以利用现有模版来创建工程</strong></li>
</ul>
<pre><code>#npm 6.x
npm init @vitejs/app my-vue-app --template vue

#npm 7+, extra double-dash is needed:
npm init @vitejs/app my-vue-app – --template vue

#yarn
yarn create @vitejs/app my-vue-app --template vue
</code></pre>
<ul>
<li><strong>运行创建的web工程</strong></li>
</ul>
<pre><code>npm run dev
</code></pre>
<p>网页输入<code>http://localhost:8080</code>,即可出现如下界面<br>
<img width="1264" alt="image" src="https://user-images.githubusercontent.com/84889770/119806371-ba40eb80-bf14-11eb-89ab-879ae32d433e.png"></p>
<ul>
<li>
<p><strong>mac用户安装VScode</strong></p>
<p>VScode下载点这里👉🏻<a href="https://code.visualstudio.com">VScode下载</a></p>
</li>
</ul>
<h2 id="d3直方图">D3直方图📊</h2>
<ul>
<li><strong>安装D3 / axios</strong></li>
</ul>
<pre><code>yarn add d3
yarn add axios
</code></pre>
<ul>
<li><strong>关键代码</strong></li>
</ul>
<p>Barchart.vue</p>
<pre><code>&lt;template&gt;
 &lt;h2&gt;罗可意201811153028 咱是直方图&lt;/h2&gt;
 &lt;div id=&quot;bar-chart-container&quot;&gt;&lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
import { defineComponent } from &quot;vue&quot;;
import axios from &quot;axios&quot;;
import * as d3 from &quot;d3&quot;;

export default defineComponent({
 data() {
   return {
     color: &quot;steelblue&quot;,
     margin: { top: 30, right: 0, bottom: 30, left: 40 },
   };
 },
 /**
  * 在挂载后即开始执行
  */
 mounted() {
   axios.get(&quot;./alphabet.json&quot;).then((res) =&gt; {
     const barChartData = Object.assign(this.formatData(res.data), {
       format: &quot;%&quot;,
       y: &quot;↑ Frequency&quot;,
     });
     this.drawBarChart(barChartData);
   });
 },

 methods: {
   /**
    * 格式化数据
    */
   formatData(data) {
     return data
       .map(({ letter, frequency }) =&gt; {
         return { name: letter, value: frequency };
       })
       .sort((a, b) =&gt; d3.descending(a.value, b.value));
   },

   /**
    * 绘制直方图
    */
   drawBarChart(data) {
     const margin = this.margin;

     const width = 800;
     const height = 500;

     // 初始化 SVG 元素
     const svg = d3
       .select(&quot;#bar-chart-container&quot;)
       .append(&quot;svg&quot;)
       .attr(&quot;class&quot;, &quot;bar-chart&quot;)
       .attr(&quot;viewBox&quot;, `0 0 ${width} ${height}`)
       .attr(&quot;width&quot;, width)
       .attr(&quot;height&quot;, height)
       .append(&quot;g&quot;);

     // https://observablehq.com/@d3/d3-scaleband
     // x 轴的缩放比例尺
     const x = d3
       .scaleBand()
       .domain(d3.range(data.length))
       .range([margin.left, width - margin.right])
       .padding(0.1);

     // y 轴的缩放比例尺
     const y = d3
       .scaleLinear()
       .domain([0, d3.max(data, (d) =&gt; d.value)])
       .nice()
       .range([height - margin.bottom, margin.top]);

     // x 坐标轴
     // tickSizeOuter(0) 移除 0 处初始的标记
     // tickFormat https://github.com/d3/d3-scale/blob/master/README.md#tickFormat
     const xAxis = (g) =&gt;
       g.attr(&quot;transform&quot;, `translate(0,${height - margin.bottom})`).call(
         d3
           .axisBottom(x)
           .tickFormat((i) =&gt; data[i].name)
           .tickSizeOuter(0)
       );

     // y 坐标轴
     const yAxis = (g) =&gt;
       g
         .attr(&quot;transform&quot;, `translate(${margin.left},0)`)
         .call(d3.axisLeft(y).ticks(null, data.format))
         // 移除区域间的竖线
         .call((g) =&gt; g.select(&quot;.domain&quot;).remove())
         .call((g) =&gt;
           g
             .append(&quot;text&quot;)
             .attr(&quot;x&quot;, -margin.left)
             .attr(&quot;y&quot;, 10)
             .attr(&quot;fill&quot;, &quot;currentColor&quot;)
             .attr(&quot;text-anchor&quot;, &quot;start&quot;)
             .text(data.y)
         );

     svg
       .append(&quot;g&quot;)
       .attr(&quot;fill&quot;, this.color)
       .selectAll(&quot;rect&quot;)
       .data(data)
       .join(&quot;rect&quot;)
       .attr(&quot;x&quot;, (d, i) =&gt; x(i))
       .attr(&quot;y&quot;, (d) =&gt; y(d.value))
       .attr(&quot;height&quot;, (d) =&gt; y(0) - y(d.value))
       .attr(&quot;width&quot;, x.bandwidth());

     // 绘制到 SVG
     svg.append(&quot;g&quot;).call(xAxis);
     svg.append(&quot;g&quot;).call(yAxis);
   },
 },
});
&lt;/script&gt;
</code></pre>
<p>App.vue</p>
<pre><code>&lt;template&gt;
  &lt;img alt=&quot;Vue logo&quot; src=&quot;./assets/logo.png&quot; /&gt;
  &lt;HelloWorld msg=&quot;Hello&quot; /&gt;
  &lt;bar-chart /&gt;
  &lt;test-axios /&gt;

&lt;/template&gt;

&lt;script setup&gt;
import HelloWorld from &quot;./components/HelloWorld.vue&quot;;
import TestAxios from &quot;./components/TestAxios.vue&quot;;
import BarChart from &quot;./components/BarChart.vue&quot;;
&lt;/script&gt;
</code></pre>
<ul>
<li><strong>最终可视化结果如下</strong>👇🏻<br>
<img src="https://user-images.githubusercontent.com/84889770/119807918-30921d80-bf16-11eb-999c-87d1f3cb1a67.png" alt="image" loading="lazy"></li>
</ul>
]]></content>
    </entry>
</feed>